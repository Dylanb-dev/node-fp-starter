'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var getPropertyName = _ramda2['default'].pipe(_ramda2['default'].prop('property'), _ramda2['default'].either(_ramda2['default'].prop('name'), _ramda2['default'].prop('value')));

var isRamdaMethod = _ramda2['default'].curry(function (methodName, callee) {
    return callee.type === 'MemberExpression' && callee.object.name === 'R' && getPropertyName(callee) === methodName;
});

var isRamdaFilterCall = _ramda2['default'].propSatisfies(isRamdaMethod('filter'), 'callee');
var isCallExpression = _ramda2['default'].propEq('type', 'CallExpression');
var isRamdaFilterCallExpression = _ramda2['default'].allPass([isCallExpression, isRamdaFilterCall]);

exports['default'] = function (context) {
    return {
        CallExpression: function CallExpression(node) {
            if (isRamdaMethod('complement', node.callee) && isRamdaFilterCallExpression(node.parent)) {
                context.report({
                    node: node.parent,
                    message: 'R.filter used with negated predicate: Use R.reject instead.'
                });
            }
        }
    };
};

module.exports = exports['default'];